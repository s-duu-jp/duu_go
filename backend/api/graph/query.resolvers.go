package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"api/ent"
	"api/graph/model"
	"context"
	"fmt"
	"strconv"

	"entgo.io/contrib/entgql"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *string, first *int, before *string, last *int, where *model.UserWhereInput) (*model.UserConnection, error) {
	afterCursor := entgql.Cursor[int]{}
	if after != nil {
		afterID, err := strconv.Atoi(*after)
		if err != nil {
			return nil, err
		}
		afterCursor = entgql.Cursor[int]{ID: afterID}
	}
	beforeCursor := entgql.Cursor[int]{}
	if before != nil {
		beforeID, err := strconv.Atoi(*before)
		if err != nil {
			return nil, err
		}
		beforeCursor = entgql.Cursor[int]{ID: beforeID}
	}

	userConn, err := r.client.User.Query().Paginate(ctx, &afterCursor, first, &beforeCursor, last, toUserPaginateOptions(where)...)
	if err != nil {
		return nil, err
	}

	return toModelUserConnection(userConn), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func toUserPaginateOptions(where *model.UserWhereInput) []ent.UserPaginateOption {
	var opts []ent.UserPaginateOption
	if where != nil {
	}
	return opts
}
func toModelUserConnection(userConn *ent.UserConnection) *model.UserConnection {
	var edges []*model.UserEdge
	for _, edge := range userConn.Edges {
		edges = append(edges, &model.UserEdge{
			Node: &model.User{
				ID:   strconv.Itoa(edge.Node.ID),
				Name: edge.Node.Name,
				// 他のフィールドも必要に応じてマッピング
			},
			Cursor: strconv.Itoa(edge.Cursor.ID),
		})
	}

	startCursor := strconv.Itoa(userConn.PageInfo.StartCursor.ID)
	endCursor := strconv.Itoa(userConn.PageInfo.EndCursor.ID)

	return &model.UserConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			HasNextPage:     userConn.PageInfo.HasNextPage,
			HasPreviousPage: userConn.PageInfo.HasPreviousPage,
			StartCursor:     &startCursor,
			EndCursor:       &endCursor,
		},
		TotalCount: userConn.TotalCount,
	}
}
