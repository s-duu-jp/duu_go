package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"api/ent"
	"api/graph/model"
	"context"
	"fmt"
	"log"
	"strconv"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context) ([]*model.Organization, error) {
	panic(fmt.Errorf("not implemented: Organizations - organizations"))
}

// Photos is the resolver for the photos field.
func (r *queryResolver) Photos(ctx context.Context) ([]*model.Photo, error) {
	panic(fmt.Errorf("not implemented: Photos - photos"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	entUsers, err := r.client.User.
		Query().
		WithPhotos().       // Photosリレーションをロード
		WithOrganization(). // Organizationリレーションをロード
		All(ctx)
	if err != nil {
		log.Fatalf("failed querying Users: %v", err)
	}
	modelUsers := make([]*model.User, len(entUsers))
	for i, entUser := range entUsers {
		modelUser := &model.User{
			ID:    strconv.Itoa(entUser.ID),
			Name:  entUser.Name,
			Email: entUser.Email,
			Sid:   entUser.Sid,
			// 他のフィールドのマッピング
		}

		// Photosのマッピング
		if entUser.Edges.Photos != nil {
			modelPhotos := make([]*model.Photo, len(entUser.Edges.Photos))
			for j, entPhoto := range entUser.Edges.Photos {
				modelPhotos[j] = &model.Photo{
					ID:   strconv.Itoa(entPhoto.ID),
					Name: entPhoto.Name,
					URL:  entPhoto.URL,
				}
			}
			modelUser.Photos = modelPhotos
		}

		// Organizationのマッピング
		if entUser.Edges.Organization != nil {
			modelUser.Organization = &model.Organization{
				ID:   strconv.Itoa(entUser.Edges.Organization.ID),
				Name: entUser.Edges.Organization.Name,
			}
		}

		modelUsers[i] = modelUser
	}
	return modelUsers, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
