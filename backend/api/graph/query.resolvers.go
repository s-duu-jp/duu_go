package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"api/ent"
	"api/graph/model"
	"context"
	"fmt"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context, after *string, first *int, before *string, last *int, where *model.OrganizationWhereInput) (*model.OrganizationConnection, error) {
	//panic(fmt.Errorf("not implemented: Organizations - organizations"))
	return r.client.Organizations.Query().Paginate(ctx, after, first, before, last, where)
}

// Photos is the resolver for the photos field.
func (r *queryResolver) Photos(ctx context.Context, after *string, first *int, before *string, last *int, where *model.PhotoWhereInput) (*model.PhotoConnection, error) {
	//panic(fmt.Errorf("not implemented: Photos - photos"))
	return r.client.Photos.Query().Paginate(ctx, after, first, before, last, where)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *string, first *int, before *string, last *int, where *model.UserWhereInput) (*model.UserConnection, error) {
	//panic(fmt.Errorf("not implemented: Users - users"))
	return r.client.User.Query().Paginate(ctx, after, first, before, last, where)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
