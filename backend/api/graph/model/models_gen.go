// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// CreateOrganizationInput is used for create Organization object.
// Input was generated by ent.
type CreateOrganizationInput struct {
	Name    string   `json:"name"`
	UserIDs []string `json:"userIDs,omitempty"`
}

// CreatePhotoInput is used for create Photo object.
// Input was generated by ent.
type CreatePhotoInput struct {
	Name   string  `json:"name"`
	URL    string  `json:"url"`
	UserID *string `json:"userID,omitempty"`
}

// CreateUserInput is used for create User object.
// Input was generated by ent.
type CreateUserInput struct {
	Sid            *string  `json:"sid,omitempty"`
	UID            string   `json:"uid"`
	Name           string   `json:"name"`
	Email          string   `json:"email"`
	Password       *string  `json:"password,omitempty"`
	RoleType       string   `json:"roleType"`
	StatusType     string   `json:"statusType"`
	OauthType      string   `json:"oauthType"`
	Sub            *string  `json:"sub,omitempty"`
	PhotoIDs       []string `json:"photoIDs,omitempty"`
	OrganizationID *string  `json:"organizationID,omitempty"`
}

type Mutation struct {
}

type Organization struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Users []*User `json:"users,omitempty"`
}

func (Organization) IsNode() {}

// OrganizationWhereInput is used for filtering Organization objects.
// Input was generated by ent.
type OrganizationWhereInput struct {
	Not *OrganizationWhereInput   `json:"not,omitempty"`
	And []*OrganizationWhereInput `json:"and,omitempty"`
	Or  []*OrganizationWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// users edge predicates
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`
}

// Information about pagination in a connection.
// https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type Photo struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	URL  string `json:"url"`
	User *User  `json:"user,omitempty"`
}

func (Photo) IsNode() {}

// PhotoWhereInput is used for filtering Photo objects.
// Input was generated by ent.
type PhotoWhereInput struct {
	Not *PhotoWhereInput   `json:"not,omitempty"`
	And []*PhotoWhereInput `json:"and,omitempty"`
	Or  []*PhotoWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// url field predicates
	URL             *string  `json:"url,omitempty"`
	URLNeq          *string  `json:"urlNEQ,omitempty"`
	URLIn           []string `json:"urlIn,omitempty"`
	URLNotIn        []string `json:"urlNotIn,omitempty"`
	URLGt           *string  `json:"urlGT,omitempty"`
	URLGte          *string  `json:"urlGTE,omitempty"`
	URLLt           *string  `json:"urlLT,omitempty"`
	URLLte          *string  `json:"urlLTE,omitempty"`
	URLContains     *string  `json:"urlContains,omitempty"`
	URLHasPrefix    *string  `json:"urlHasPrefix,omitempty"`
	URLHasSuffix    *string  `json:"urlHasSuffix,omitempty"`
	URLEqualFold    *string  `json:"urlEqualFold,omitempty"`
	URLContainsFold *string  `json:"urlContainsFold,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

type Query struct {
}

// UpdateOrganizationInput is used for update Organization object.
// Input was generated by ent.
type UpdateOrganizationInput struct {
	Name          *string  `json:"name,omitempty"`
	AddUserIDs    []string `json:"addUserIDs,omitempty"`
	RemoveUserIDs []string `json:"removeUserIDs,omitempty"`
	ClearUsers    *bool    `json:"clearUsers,omitempty"`
}

// UpdatePhotoInput is used for update Photo object.
// Input was generated by ent.
type UpdatePhotoInput struct {
	Name      *string `json:"name,omitempty"`
	URL       *string `json:"url,omitempty"`
	UserID    *string `json:"userID,omitempty"`
	ClearUser *bool   `json:"clearUser,omitempty"`
}

// UpdateUserInput is used for update User object.
// Input was generated by ent.
type UpdateUserInput struct {
	Sid               *string  `json:"sid,omitempty"`
	UID               *string  `json:"uid,omitempty"`
	Name              *string  `json:"name,omitempty"`
	Email             *string  `json:"email,omitempty"`
	Password          *string  `json:"password,omitempty"`
	ClearPassword     *bool    `json:"clearPassword,omitempty"`
	RoleType          *string  `json:"roleType,omitempty"`
	StatusType        *string  `json:"statusType,omitempty"`
	OauthType         *string  `json:"oauthType,omitempty"`
	Sub               *string  `json:"sub,omitempty"`
	ClearSub          *bool    `json:"clearSub,omitempty"`
	AddPhotoIDs       []string `json:"addPhotoIDs,omitempty"`
	RemovePhotoIDs    []string `json:"removePhotoIDs,omitempty"`
	ClearPhotos       *bool    `json:"clearPhotos,omitempty"`
	OrganizationID    *string  `json:"organizationID,omitempty"`
	ClearOrganization *bool    `json:"clearOrganization,omitempty"`
}

type User struct {
	ID           string        `json:"id"`
	Sid          string        `json:"sid"`
	UID          string        `json:"uid"`
	Name         string        `json:"name"`
	Email        string        `json:"email"`
	RoleType     string        `json:"roleType"`
	StatusType   string        `json:"statusType"`
	OauthType    string        `json:"oauthType"`
	Sub          *string       `json:"sub,omitempty"`
	Photos       []*Photo      `json:"photos,omitempty"`
	Organization *Organization `json:"organization,omitempty"`
}

func (User) IsNode() {}

// UserWhereInput is used for filtering User objects.
// Input was generated by ent.
type UserWhereInput struct {
	Not *UserWhereInput   `json:"not,omitempty"`
	And []*UserWhereInput `json:"and,omitempty"`
	Or  []*UserWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// sid field predicates
	Sid             *string  `json:"sid,omitempty"`
	SidNeq          *string  `json:"sidNEQ,omitempty"`
	SidIn           []string `json:"sidIn,omitempty"`
	SidNotIn        []string `json:"sidNotIn,omitempty"`
	SidGt           *string  `json:"sidGT,omitempty"`
	SidGte          *string  `json:"sidGTE,omitempty"`
	SidLt           *string  `json:"sidLT,omitempty"`
	SidLte          *string  `json:"sidLTE,omitempty"`
	SidContains     *string  `json:"sidContains,omitempty"`
	SidHasPrefix    *string  `json:"sidHasPrefix,omitempty"`
	SidHasSuffix    *string  `json:"sidHasSuffix,omitempty"`
	SidEqualFold    *string  `json:"sidEqualFold,omitempty"`
	SidContainsFold *string  `json:"sidContainsFold,omitempty"`
	// uid field predicates
	UID             *string  `json:"uid,omitempty"`
	UIDNeq          *string  `json:"uidNEQ,omitempty"`
	UIDIn           []string `json:"uidIn,omitempty"`
	UIDNotIn        []string `json:"uidNotIn,omitempty"`
	UIDGt           *string  `json:"uidGT,omitempty"`
	UIDGte          *string  `json:"uidGTE,omitempty"`
	UIDLt           *string  `json:"uidLT,omitempty"`
	UIDLte          *string  `json:"uidLTE,omitempty"`
	UIDContains     *string  `json:"uidContains,omitempty"`
	UIDHasPrefix    *string  `json:"uidHasPrefix,omitempty"`
	UIDHasSuffix    *string  `json:"uidHasSuffix,omitempty"`
	UIDEqualFold    *string  `json:"uidEqualFold,omitempty"`
	UIDContainsFold *string  `json:"uidContainsFold,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// email field predicates
	Email             *string  `json:"email,omitempty"`
	EmailNeq          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGt           *string  `json:"emailGT,omitempty"`
	EmailGte          *string  `json:"emailGTE,omitempty"`
	EmailLt           *string  `json:"emailLT,omitempty"`
	EmailLte          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`
	// role_type field predicates
	RoleType             *string  `json:"roleType,omitempty"`
	RoleTypeNeq          *string  `json:"roleTypeNEQ,omitempty"`
	RoleTypeIn           []string `json:"roleTypeIn,omitempty"`
	RoleTypeNotIn        []string `json:"roleTypeNotIn,omitempty"`
	RoleTypeGt           *string  `json:"roleTypeGT,omitempty"`
	RoleTypeGte          *string  `json:"roleTypeGTE,omitempty"`
	RoleTypeLt           *string  `json:"roleTypeLT,omitempty"`
	RoleTypeLte          *string  `json:"roleTypeLTE,omitempty"`
	RoleTypeContains     *string  `json:"roleTypeContains,omitempty"`
	RoleTypeHasPrefix    *string  `json:"roleTypeHasPrefix,omitempty"`
	RoleTypeHasSuffix    *string  `json:"roleTypeHasSuffix,omitempty"`
	RoleTypeEqualFold    *string  `json:"roleTypeEqualFold,omitempty"`
	RoleTypeContainsFold *string  `json:"roleTypeContainsFold,omitempty"`
	// status_type field predicates
	StatusType             *string  `json:"statusType,omitempty"`
	StatusTypeNeq          *string  `json:"statusTypeNEQ,omitempty"`
	StatusTypeIn           []string `json:"statusTypeIn,omitempty"`
	StatusTypeNotIn        []string `json:"statusTypeNotIn,omitempty"`
	StatusTypeGt           *string  `json:"statusTypeGT,omitempty"`
	StatusTypeGte          *string  `json:"statusTypeGTE,omitempty"`
	StatusTypeLt           *string  `json:"statusTypeLT,omitempty"`
	StatusTypeLte          *string  `json:"statusTypeLTE,omitempty"`
	StatusTypeContains     *string  `json:"statusTypeContains,omitempty"`
	StatusTypeHasPrefix    *string  `json:"statusTypeHasPrefix,omitempty"`
	StatusTypeHasSuffix    *string  `json:"statusTypeHasSuffix,omitempty"`
	StatusTypeEqualFold    *string  `json:"statusTypeEqualFold,omitempty"`
	StatusTypeContainsFold *string  `json:"statusTypeContainsFold,omitempty"`
	// oauth_type field predicates
	OauthType             *string  `json:"oauthType,omitempty"`
	OauthTypeNeq          *string  `json:"oauthTypeNEQ,omitempty"`
	OauthTypeIn           []string `json:"oauthTypeIn,omitempty"`
	OauthTypeNotIn        []string `json:"oauthTypeNotIn,omitempty"`
	OauthTypeGt           *string  `json:"oauthTypeGT,omitempty"`
	OauthTypeGte          *string  `json:"oauthTypeGTE,omitempty"`
	OauthTypeLt           *string  `json:"oauthTypeLT,omitempty"`
	OauthTypeLte          *string  `json:"oauthTypeLTE,omitempty"`
	OauthTypeContains     *string  `json:"oauthTypeContains,omitempty"`
	OauthTypeHasPrefix    *string  `json:"oauthTypeHasPrefix,omitempty"`
	OauthTypeHasSuffix    *string  `json:"oauthTypeHasSuffix,omitempty"`
	OauthTypeEqualFold    *string  `json:"oauthTypeEqualFold,omitempty"`
	OauthTypeContainsFold *string  `json:"oauthTypeContainsFold,omitempty"`
	// sub field predicates
	Sub             *string  `json:"sub,omitempty"`
	SubNeq          *string  `json:"subNEQ,omitempty"`
	SubIn           []string `json:"subIn,omitempty"`
	SubNotIn        []string `json:"subNotIn,omitempty"`
	SubGt           *string  `json:"subGT,omitempty"`
	SubGte          *string  `json:"subGTE,omitempty"`
	SubLt           *string  `json:"subLT,omitempty"`
	SubLte          *string  `json:"subLTE,omitempty"`
	SubContains     *string  `json:"subContains,omitempty"`
	SubHasPrefix    *string  `json:"subHasPrefix,omitempty"`
	SubHasSuffix    *string  `json:"subHasSuffix,omitempty"`
	SubIsNil        *bool    `json:"subIsNil,omitempty"`
	SubNotNil       *bool    `json:"subNotNil,omitempty"`
	SubEqualFold    *string  `json:"subEqualFold,omitempty"`
	SubContainsFold *string  `json:"subContainsFold,omitempty"`
	// photos edge predicates
	HasPhotos     *bool              `json:"hasPhotos,omitempty"`
	HasPhotosWith []*PhotoWhereInput `json:"hasPhotosWith,omitempty"`
	// organization edge predicates
	HasOrganization     *bool                     `json:"hasOrganization,omitempty"`
	HasOrganizationWith []*OrganizationWhereInput `json:"hasOrganizationWith,omitempty"`
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
