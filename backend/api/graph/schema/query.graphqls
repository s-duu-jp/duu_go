directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateOrganizationInput is used for create Organization object.
Input was generated by ent.
"""
input CreateOrganizationInput {
  name: String!
  userIDs: [ID!]
}
"""
CreatePhotoInput is used for create Photo object.
Input was generated by ent.
"""
input CreatePhotoInput {
  name: String!
  url: String!
  userID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  sid: String
  uid: String!
  name: String!
  email: String!
  password: String
  roleType: String!
  statusType: String!
  oauthType: String!
  sub: String
  photoIDs: [ID!]
  organizationID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "api/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
type Organization implements Node {
  id: ID!
  name: String!
  users: [User!]
}
"""
A connection to a list of items.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  The item at the end of the edge.
  """
  node: Organization
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
  not: OrganizationWhereInput
  and: [OrganizationWhereInput!]
  or: [OrganizationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Photo implements Node {
  id: ID!
  name: String!
  url: String!
  user: User
}
"""
A connection to a list of items.
"""
type PhotoConnection {
  """
  A list of edges.
  """
  edges: [PhotoEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PhotoEdge {
  """
  The item at the end of the edge.
  """
  node: Photo
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
PhotoWhereInput is used for filtering Photo objects.
Input was generated by ent.
"""
input PhotoWhereInput {
  not: PhotoWhereInput
  and: [PhotoWhereInput!]
  or: [PhotoWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Organizations returned from the connection.
    """
    where: OrganizationWhereInput
  ): OrganizationConnection!
  photos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Photos returned from the connection.
    """
    where: PhotoWhereInput
  ): PhotoConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
"""
UpdateOrganizationInput is used for update Organization object.
Input was generated by ent.
"""
input UpdateOrganizationInput {
  name: String
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
}
"""
UpdatePhotoInput is used for update Photo object.
Input was generated by ent.
"""
input UpdatePhotoInput {
  name: String
  url: String
  userID: ID
  clearUser: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  sid: String
  uid: String
  name: String
  email: String
  password: String
  clearPassword: Boolean
  roleType: String
  statusType: String
  oauthType: String
  sub: String
  clearSub: Boolean
  addPhotoIDs: [ID!]
  removePhotoIDs: [ID!]
  clearPhotos: Boolean
  organizationID: ID
  clearOrganization: Boolean
}
type User implements Node {
  id: ID!
  sid: String!
  uid: String!
  name: String!
  email: String!
  roleType: String!
  statusType: String!
  oauthType: String!
  sub: String
  photos: [Photo!]
  organization: Organization
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  sid field predicates
  """
  sid: String
  sidNEQ: String
  sidIn: [String!]
  sidNotIn: [String!]
  sidGT: String
  sidGTE: String
  sidLT: String
  sidLTE: String
  sidContains: String
  sidHasPrefix: String
  sidHasSuffix: String
  sidEqualFold: String
  sidContainsFold: String
  """
  uid field predicates
  """
  uid: String
  uidNEQ: String
  uidIn: [String!]
  uidNotIn: [String!]
  uidGT: String
  uidGTE: String
  uidLT: String
  uidLTE: String
  uidContains: String
  uidHasPrefix: String
  uidHasSuffix: String
  uidEqualFold: String
  uidContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  role_type field predicates
  """
  roleType: String
  roleTypeNEQ: String
  roleTypeIn: [String!]
  roleTypeNotIn: [String!]
  roleTypeGT: String
  roleTypeGTE: String
  roleTypeLT: String
  roleTypeLTE: String
  roleTypeContains: String
  roleTypeHasPrefix: String
  roleTypeHasSuffix: String
  roleTypeEqualFold: String
  roleTypeContainsFold: String
  """
  status_type field predicates
  """
  statusType: String
  statusTypeNEQ: String
  statusTypeIn: [String!]
  statusTypeNotIn: [String!]
  statusTypeGT: String
  statusTypeGTE: String
  statusTypeLT: String
  statusTypeLTE: String
  statusTypeContains: String
  statusTypeHasPrefix: String
  statusTypeHasSuffix: String
  statusTypeEqualFold: String
  statusTypeContainsFold: String
  """
  oauth_type field predicates
  """
  oauthType: String
  oauthTypeNEQ: String
  oauthTypeIn: [String!]
  oauthTypeNotIn: [String!]
  oauthTypeGT: String
  oauthTypeGTE: String
  oauthTypeLT: String
  oauthTypeLTE: String
  oauthTypeContains: String
  oauthTypeHasPrefix: String
  oauthTypeHasSuffix: String
  oauthTypeEqualFold: String
  oauthTypeContainsFold: String
  """
  sub field predicates
  """
  sub: String
  subNEQ: String
  subIn: [String!]
  subNotIn: [String!]
  subGT: String
  subGTE: String
  subLT: String
  subLTE: String
  subContains: String
  subHasPrefix: String
  subHasSuffix: String
  subIsNil: Boolean
  subNotNil: Boolean
  subEqualFold: String
  subContainsFold: String
  """
  photos edge predicates
  """
  hasPhotos: Boolean
  hasPhotosWith: [PhotoWhereInput!]
  """
  organization edge predicates
  """
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
}
