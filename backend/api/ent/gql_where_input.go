// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/predicate"
	"api/ent/user"
	"errors"
	"fmt"
)

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "sid" field predicates.
	Sid             *string  `json:"sid,omitempty"`
	SidNEQ          *string  `json:"sidNEQ,omitempty"`
	SidIn           []string `json:"sidIn,omitempty"`
	SidNotIn        []string `json:"sidNotIn,omitempty"`
	SidGT           *string  `json:"sidGT,omitempty"`
	SidGTE          *string  `json:"sidGTE,omitempty"`
	SidLT           *string  `json:"sidLT,omitempty"`
	SidLTE          *string  `json:"sidLTE,omitempty"`
	SidContains     *string  `json:"sidContains,omitempty"`
	SidHasPrefix    *string  `json:"sidHasPrefix,omitempty"`
	SidHasSuffix    *string  `json:"sidHasSuffix,omitempty"`
	SidEqualFold    *string  `json:"sidEqualFold,omitempty"`
	SidContainsFold *string  `json:"sidContainsFold,omitempty"`

	// "uid" field predicates.
	UID             *string  `json:"uid,omitempty"`
	UIDNEQ          *string  `json:"uidNEQ,omitempty"`
	UIDIn           []string `json:"uidIn,omitempty"`
	UIDNotIn        []string `json:"uidNotIn,omitempty"`
	UIDGT           *string  `json:"uidGT,omitempty"`
	UIDGTE          *string  `json:"uidGTE,omitempty"`
	UIDLT           *string  `json:"uidLT,omitempty"`
	UIDLTE          *string  `json:"uidLTE,omitempty"`
	UIDContains     *string  `json:"uidContains,omitempty"`
	UIDHasPrefix    *string  `json:"uidHasPrefix,omitempty"`
	UIDHasSuffix    *string  `json:"uidHasSuffix,omitempty"`
	UIDEqualFold    *string  `json:"uidEqualFold,omitempty"`
	UIDContainsFold *string  `json:"uidContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordIsNil        bool     `json:"passwordIsNil,omitempty"`
	PasswordNotNil       bool     `json:"passwordNotNil,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "role_type" field predicates.
	RoleType             *string  `json:"roleType,omitempty"`
	RoleTypeNEQ          *string  `json:"roleTypeNEQ,omitempty"`
	RoleTypeIn           []string `json:"roleTypeIn,omitempty"`
	RoleTypeNotIn        []string `json:"roleTypeNotIn,omitempty"`
	RoleTypeGT           *string  `json:"roleTypeGT,omitempty"`
	RoleTypeGTE          *string  `json:"roleTypeGTE,omitempty"`
	RoleTypeLT           *string  `json:"roleTypeLT,omitempty"`
	RoleTypeLTE          *string  `json:"roleTypeLTE,omitempty"`
	RoleTypeContains     *string  `json:"roleTypeContains,omitempty"`
	RoleTypeHasPrefix    *string  `json:"roleTypeHasPrefix,omitempty"`
	RoleTypeHasSuffix    *string  `json:"roleTypeHasSuffix,omitempty"`
	RoleTypeEqualFold    *string  `json:"roleTypeEqualFold,omitempty"`
	RoleTypeContainsFold *string  `json:"roleTypeContainsFold,omitempty"`

	// "status_type" field predicates.
	StatusType             *string  `json:"statusType,omitempty"`
	StatusTypeNEQ          *string  `json:"statusTypeNEQ,omitempty"`
	StatusTypeIn           []string `json:"statusTypeIn,omitempty"`
	StatusTypeNotIn        []string `json:"statusTypeNotIn,omitempty"`
	StatusTypeGT           *string  `json:"statusTypeGT,omitempty"`
	StatusTypeGTE          *string  `json:"statusTypeGTE,omitempty"`
	StatusTypeLT           *string  `json:"statusTypeLT,omitempty"`
	StatusTypeLTE          *string  `json:"statusTypeLTE,omitempty"`
	StatusTypeContains     *string  `json:"statusTypeContains,omitempty"`
	StatusTypeHasPrefix    *string  `json:"statusTypeHasPrefix,omitempty"`
	StatusTypeHasSuffix    *string  `json:"statusTypeHasSuffix,omitempty"`
	StatusTypeEqualFold    *string  `json:"statusTypeEqualFold,omitempty"`
	StatusTypeContainsFold *string  `json:"statusTypeContainsFold,omitempty"`

	// "oauth_type" field predicates.
	OauthType             *string  `json:"oauthType,omitempty"`
	OauthTypeNEQ          *string  `json:"oauthTypeNEQ,omitempty"`
	OauthTypeIn           []string `json:"oauthTypeIn,omitempty"`
	OauthTypeNotIn        []string `json:"oauthTypeNotIn,omitempty"`
	OauthTypeGT           *string  `json:"oauthTypeGT,omitempty"`
	OauthTypeGTE          *string  `json:"oauthTypeGTE,omitempty"`
	OauthTypeLT           *string  `json:"oauthTypeLT,omitempty"`
	OauthTypeLTE          *string  `json:"oauthTypeLTE,omitempty"`
	OauthTypeContains     *string  `json:"oauthTypeContains,omitempty"`
	OauthTypeHasPrefix    *string  `json:"oauthTypeHasPrefix,omitempty"`
	OauthTypeHasSuffix    *string  `json:"oauthTypeHasSuffix,omitempty"`
	OauthTypeEqualFold    *string  `json:"oauthTypeEqualFold,omitempty"`
	OauthTypeContainsFold *string  `json:"oauthTypeContainsFold,omitempty"`

	// "sub" field predicates.
	Sub             *string  `json:"sub,omitempty"`
	SubNEQ          *string  `json:"subNEQ,omitempty"`
	SubIn           []string `json:"subIn,omitempty"`
	SubNotIn        []string `json:"subNotIn,omitempty"`
	SubGT           *string  `json:"subGT,omitempty"`
	SubGTE          *string  `json:"subGTE,omitempty"`
	SubLT           *string  `json:"subLT,omitempty"`
	SubLTE          *string  `json:"subLTE,omitempty"`
	SubContains     *string  `json:"subContains,omitempty"`
	SubHasPrefix    *string  `json:"subHasPrefix,omitempty"`
	SubHasSuffix    *string  `json:"subHasSuffix,omitempty"`
	SubIsNil        bool     `json:"subIsNil,omitempty"`
	SubNotNil       bool     `json:"subNotNil,omitempty"`
	SubEqualFold    *string  `json:"subEqualFold,omitempty"`
	SubContainsFold *string  `json:"subContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Sid != nil {
		predicates = append(predicates, user.SidEQ(*i.Sid))
	}
	if i.SidNEQ != nil {
		predicates = append(predicates, user.SidNEQ(*i.SidNEQ))
	}
	if len(i.SidIn) > 0 {
		predicates = append(predicates, user.SidIn(i.SidIn...))
	}
	if len(i.SidNotIn) > 0 {
		predicates = append(predicates, user.SidNotIn(i.SidNotIn...))
	}
	if i.SidGT != nil {
		predicates = append(predicates, user.SidGT(*i.SidGT))
	}
	if i.SidGTE != nil {
		predicates = append(predicates, user.SidGTE(*i.SidGTE))
	}
	if i.SidLT != nil {
		predicates = append(predicates, user.SidLT(*i.SidLT))
	}
	if i.SidLTE != nil {
		predicates = append(predicates, user.SidLTE(*i.SidLTE))
	}
	if i.SidContains != nil {
		predicates = append(predicates, user.SidContains(*i.SidContains))
	}
	if i.SidHasPrefix != nil {
		predicates = append(predicates, user.SidHasPrefix(*i.SidHasPrefix))
	}
	if i.SidHasSuffix != nil {
		predicates = append(predicates, user.SidHasSuffix(*i.SidHasSuffix))
	}
	if i.SidEqualFold != nil {
		predicates = append(predicates, user.SidEqualFold(*i.SidEqualFold))
	}
	if i.SidContainsFold != nil {
		predicates = append(predicates, user.SidContainsFold(*i.SidContainsFold))
	}
	if i.UID != nil {
		predicates = append(predicates, user.UIDEQ(*i.UID))
	}
	if i.UIDNEQ != nil {
		predicates = append(predicates, user.UIDNEQ(*i.UIDNEQ))
	}
	if len(i.UIDIn) > 0 {
		predicates = append(predicates, user.UIDIn(i.UIDIn...))
	}
	if len(i.UIDNotIn) > 0 {
		predicates = append(predicates, user.UIDNotIn(i.UIDNotIn...))
	}
	if i.UIDGT != nil {
		predicates = append(predicates, user.UIDGT(*i.UIDGT))
	}
	if i.UIDGTE != nil {
		predicates = append(predicates, user.UIDGTE(*i.UIDGTE))
	}
	if i.UIDLT != nil {
		predicates = append(predicates, user.UIDLT(*i.UIDLT))
	}
	if i.UIDLTE != nil {
		predicates = append(predicates, user.UIDLTE(*i.UIDLTE))
	}
	if i.UIDContains != nil {
		predicates = append(predicates, user.UIDContains(*i.UIDContains))
	}
	if i.UIDHasPrefix != nil {
		predicates = append(predicates, user.UIDHasPrefix(*i.UIDHasPrefix))
	}
	if i.UIDHasSuffix != nil {
		predicates = append(predicates, user.UIDHasSuffix(*i.UIDHasSuffix))
	}
	if i.UIDEqualFold != nil {
		predicates = append(predicates, user.UIDEqualFold(*i.UIDEqualFold))
	}
	if i.UIDContainsFold != nil {
		predicates = append(predicates, user.UIDContainsFold(*i.UIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Password != nil {
		predicates = append(predicates, user.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, user.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, user.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, user.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, user.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, user.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, user.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, user.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, user.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, user.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, user.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordIsNil {
		predicates = append(predicates, user.PasswordIsNil())
	}
	if i.PasswordNotNil {
		predicates = append(predicates, user.PasswordNotNil())
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, user.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, user.PasswordContainsFold(*i.PasswordContainsFold))
	}
	if i.RoleType != nil {
		predicates = append(predicates, user.RoleTypeEQ(*i.RoleType))
	}
	if i.RoleTypeNEQ != nil {
		predicates = append(predicates, user.RoleTypeNEQ(*i.RoleTypeNEQ))
	}
	if len(i.RoleTypeIn) > 0 {
		predicates = append(predicates, user.RoleTypeIn(i.RoleTypeIn...))
	}
	if len(i.RoleTypeNotIn) > 0 {
		predicates = append(predicates, user.RoleTypeNotIn(i.RoleTypeNotIn...))
	}
	if i.RoleTypeGT != nil {
		predicates = append(predicates, user.RoleTypeGT(*i.RoleTypeGT))
	}
	if i.RoleTypeGTE != nil {
		predicates = append(predicates, user.RoleTypeGTE(*i.RoleTypeGTE))
	}
	if i.RoleTypeLT != nil {
		predicates = append(predicates, user.RoleTypeLT(*i.RoleTypeLT))
	}
	if i.RoleTypeLTE != nil {
		predicates = append(predicates, user.RoleTypeLTE(*i.RoleTypeLTE))
	}
	if i.RoleTypeContains != nil {
		predicates = append(predicates, user.RoleTypeContains(*i.RoleTypeContains))
	}
	if i.RoleTypeHasPrefix != nil {
		predicates = append(predicates, user.RoleTypeHasPrefix(*i.RoleTypeHasPrefix))
	}
	if i.RoleTypeHasSuffix != nil {
		predicates = append(predicates, user.RoleTypeHasSuffix(*i.RoleTypeHasSuffix))
	}
	if i.RoleTypeEqualFold != nil {
		predicates = append(predicates, user.RoleTypeEqualFold(*i.RoleTypeEqualFold))
	}
	if i.RoleTypeContainsFold != nil {
		predicates = append(predicates, user.RoleTypeContainsFold(*i.RoleTypeContainsFold))
	}
	if i.StatusType != nil {
		predicates = append(predicates, user.StatusTypeEQ(*i.StatusType))
	}
	if i.StatusTypeNEQ != nil {
		predicates = append(predicates, user.StatusTypeNEQ(*i.StatusTypeNEQ))
	}
	if len(i.StatusTypeIn) > 0 {
		predicates = append(predicates, user.StatusTypeIn(i.StatusTypeIn...))
	}
	if len(i.StatusTypeNotIn) > 0 {
		predicates = append(predicates, user.StatusTypeNotIn(i.StatusTypeNotIn...))
	}
	if i.StatusTypeGT != nil {
		predicates = append(predicates, user.StatusTypeGT(*i.StatusTypeGT))
	}
	if i.StatusTypeGTE != nil {
		predicates = append(predicates, user.StatusTypeGTE(*i.StatusTypeGTE))
	}
	if i.StatusTypeLT != nil {
		predicates = append(predicates, user.StatusTypeLT(*i.StatusTypeLT))
	}
	if i.StatusTypeLTE != nil {
		predicates = append(predicates, user.StatusTypeLTE(*i.StatusTypeLTE))
	}
	if i.StatusTypeContains != nil {
		predicates = append(predicates, user.StatusTypeContains(*i.StatusTypeContains))
	}
	if i.StatusTypeHasPrefix != nil {
		predicates = append(predicates, user.StatusTypeHasPrefix(*i.StatusTypeHasPrefix))
	}
	if i.StatusTypeHasSuffix != nil {
		predicates = append(predicates, user.StatusTypeHasSuffix(*i.StatusTypeHasSuffix))
	}
	if i.StatusTypeEqualFold != nil {
		predicates = append(predicates, user.StatusTypeEqualFold(*i.StatusTypeEqualFold))
	}
	if i.StatusTypeContainsFold != nil {
		predicates = append(predicates, user.StatusTypeContainsFold(*i.StatusTypeContainsFold))
	}
	if i.OauthType != nil {
		predicates = append(predicates, user.OauthTypeEQ(*i.OauthType))
	}
	if i.OauthTypeNEQ != nil {
		predicates = append(predicates, user.OauthTypeNEQ(*i.OauthTypeNEQ))
	}
	if len(i.OauthTypeIn) > 0 {
		predicates = append(predicates, user.OauthTypeIn(i.OauthTypeIn...))
	}
	if len(i.OauthTypeNotIn) > 0 {
		predicates = append(predicates, user.OauthTypeNotIn(i.OauthTypeNotIn...))
	}
	if i.OauthTypeGT != nil {
		predicates = append(predicates, user.OauthTypeGT(*i.OauthTypeGT))
	}
	if i.OauthTypeGTE != nil {
		predicates = append(predicates, user.OauthTypeGTE(*i.OauthTypeGTE))
	}
	if i.OauthTypeLT != nil {
		predicates = append(predicates, user.OauthTypeLT(*i.OauthTypeLT))
	}
	if i.OauthTypeLTE != nil {
		predicates = append(predicates, user.OauthTypeLTE(*i.OauthTypeLTE))
	}
	if i.OauthTypeContains != nil {
		predicates = append(predicates, user.OauthTypeContains(*i.OauthTypeContains))
	}
	if i.OauthTypeHasPrefix != nil {
		predicates = append(predicates, user.OauthTypeHasPrefix(*i.OauthTypeHasPrefix))
	}
	if i.OauthTypeHasSuffix != nil {
		predicates = append(predicates, user.OauthTypeHasSuffix(*i.OauthTypeHasSuffix))
	}
	if i.OauthTypeEqualFold != nil {
		predicates = append(predicates, user.OauthTypeEqualFold(*i.OauthTypeEqualFold))
	}
	if i.OauthTypeContainsFold != nil {
		predicates = append(predicates, user.OauthTypeContainsFold(*i.OauthTypeContainsFold))
	}
	if i.Sub != nil {
		predicates = append(predicates, user.SubEQ(*i.Sub))
	}
	if i.SubNEQ != nil {
		predicates = append(predicates, user.SubNEQ(*i.SubNEQ))
	}
	if len(i.SubIn) > 0 {
		predicates = append(predicates, user.SubIn(i.SubIn...))
	}
	if len(i.SubNotIn) > 0 {
		predicates = append(predicates, user.SubNotIn(i.SubNotIn...))
	}
	if i.SubGT != nil {
		predicates = append(predicates, user.SubGT(*i.SubGT))
	}
	if i.SubGTE != nil {
		predicates = append(predicates, user.SubGTE(*i.SubGTE))
	}
	if i.SubLT != nil {
		predicates = append(predicates, user.SubLT(*i.SubLT))
	}
	if i.SubLTE != nil {
		predicates = append(predicates, user.SubLTE(*i.SubLTE))
	}
	if i.SubContains != nil {
		predicates = append(predicates, user.SubContains(*i.SubContains))
	}
	if i.SubHasPrefix != nil {
		predicates = append(predicates, user.SubHasPrefix(*i.SubHasPrefix))
	}
	if i.SubHasSuffix != nil {
		predicates = append(predicates, user.SubHasSuffix(*i.SubHasSuffix))
	}
	if i.SubIsNil {
		predicates = append(predicates, user.SubIsNil())
	}
	if i.SubNotNil {
		predicates = append(predicates, user.SubNotNil())
	}
	if i.SubEqualFold != nil {
		predicates = append(predicates, user.SubEqualFold(*i.SubEqualFold))
	}
	if i.SubContainsFold != nil {
		predicates = append(predicates, user.SubContainsFold(*i.SubContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
