// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/photo"
	"api/ent/predicate"
	"api/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhotoUpdate is the builder for updating Photo entities.
type PhotoUpdate struct {
	config
	hooks    []Hook
	mutation *PhotoMutation
}

// Where appends a list predicates to the PhotoUpdate builder.
func (pu *PhotoUpdate) Where(ps ...predicate.Photo) *PhotoUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PhotoUpdate) SetName(s string) *PhotoUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableName(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetURL sets the "url" field.
func (pu *PhotoUpdate) SetURL(s string) *PhotoUpdate {
	pu.mutation.SetURL(s)
	return pu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableURL(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetURL(*s)
	}
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PhotoUpdate) SetUserID(id int) *PhotoUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pu *PhotoUpdate) SetNillableUserID(id *int) *PhotoUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PhotoUpdate) SetUser(u *User) *PhotoUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the PhotoMutation object of the builder.
func (pu *PhotoUpdate) Mutation() *PhotoMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PhotoUpdate) ClearUser() *PhotoUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PhotoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PhotoUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PhotoUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PhotoUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PhotoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(photo.Table, photo.Columns, sqlgraph.NewFieldSpec(photo.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(photo.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.URL(); ok {
		_spec.SetField(photo.FieldURL, field.TypeString, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photo.UserTable,
			Columns: []string{photo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photo.UserTable,
			Columns: []string{photo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PhotoUpdateOne is the builder for updating a single Photo entity.
type PhotoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PhotoMutation
}

// SetName sets the "name" field.
func (puo *PhotoUpdateOne) SetName(s string) *PhotoUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableName(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetURL sets the "url" field.
func (puo *PhotoUpdateOne) SetURL(s string) *PhotoUpdateOne {
	puo.mutation.SetURL(s)
	return puo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableURL(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetURL(*s)
	}
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PhotoUpdateOne) SetUserID(id int) *PhotoUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableUserID(id *int) *PhotoUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PhotoUpdateOne) SetUser(u *User) *PhotoUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the PhotoMutation object of the builder.
func (puo *PhotoUpdateOne) Mutation() *PhotoMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PhotoUpdateOne) ClearUser() *PhotoUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Where appends a list predicates to the PhotoUpdate builder.
func (puo *PhotoUpdateOne) Where(ps ...predicate.Photo) *PhotoUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PhotoUpdateOne) Select(field string, fields ...string) *PhotoUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Photo entity.
func (puo *PhotoUpdateOne) Save(ctx context.Context) (*Photo, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PhotoUpdateOne) SaveX(ctx context.Context) *Photo {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PhotoUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PhotoUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PhotoUpdateOne) sqlSave(ctx context.Context) (_node *Photo, err error) {
	_spec := sqlgraph.NewUpdateSpec(photo.Table, photo.Columns, sqlgraph.NewFieldSpec(photo.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Photo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, photo.FieldID)
		for _, f := range fields {
			if !photo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != photo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(photo.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.URL(); ok {
		_spec.SetField(photo.FieldURL, field.TypeString, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photo.UserTable,
			Columns: []string{photo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photo.UserTable,
			Columns: []string{photo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Photo{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
