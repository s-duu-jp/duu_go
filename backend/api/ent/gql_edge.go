// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (o *Organization) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryUsers().All(ctx)
	}
	return result, err
}

func (ph *Photo) User(ctx context.Context) (*User, error) {
	result, err := ph.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Photos(ctx context.Context) (result []*Photo, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPhotos(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PhotosOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPhotos().All(ctx)
	}
	return result, err
}

func (u *User) Organization(ctx context.Context) (*Organization, error) {
	result, err := u.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryOrganization().Only(ctx)
	}
	return result, MaskNotFound(err)
}
