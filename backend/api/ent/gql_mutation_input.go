// Code generated by ent, DO NOT EDIT.

package ent

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Sid        *string
	UID        string
	Name       string
	Email      string
	Password   *string
	RoleType   string
	StatusType string
	OauthType  string
	Sub        *string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.Sid; v != nil {
		m.SetSid(*v)
	}
	m.SetUID(i.UID)
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	m.SetRoleType(i.RoleType)
	m.SetStatusType(i.StatusType)
	m.SetOauthType(i.OauthType)
	if v := i.Sub; v != nil {
		m.SetSub(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Sid           *string
	UID           *string
	Name          *string
	Email         *string
	ClearPassword bool
	Password      *string
	RoleType      *string
	StatusType    *string
	OauthType     *string
	ClearSub      bool
	Sub           *string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Sid; v != nil {
		m.SetSid(*v)
	}
	if v := i.UID; v != nil {
		m.SetUID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.RoleType; v != nil {
		m.SetRoleType(*v)
	}
	if v := i.StatusType; v != nil {
		m.SetStatusType(*v)
	}
	if v := i.OauthType; v != nil {
		m.SetOauthType(*v)
	}
	if i.ClearSub {
		m.ClearSub()
	}
	if v := i.Sub; v != nil {
		m.SetSub(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
