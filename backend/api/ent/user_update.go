// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/organization"
	"api/ent/photo"
	"api/ent/predicate"
	"api/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetSid sets the "sid" field.
func (uu *UserUpdate) SetSid(s string) *UserUpdate {
	uu.mutation.SetSid(s)
	return uu
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSid(s *string) *UserUpdate {
	if s != nil {
		uu.SetSid(*s)
	}
	return uu
}

// SetUID sets the "uid" field.
func (uu *UserUpdate) SetUID(s string) *UserUpdate {
	uu.mutation.SetUID(s)
	return uu
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUID(s *string) *UserUpdate {
	if s != nil {
		uu.SetUID(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// ClearPassword clears the value of the "password" field.
func (uu *UserUpdate) ClearPassword() *UserUpdate {
	uu.mutation.ClearPassword()
	return uu
}

// SetRoleType sets the "role_type" field.
func (uu *UserUpdate) SetRoleType(s string) *UserUpdate {
	uu.mutation.SetRoleType(s)
	return uu
}

// SetNillableRoleType sets the "role_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRoleType(s *string) *UserUpdate {
	if s != nil {
		uu.SetRoleType(*s)
	}
	return uu
}

// SetStatusType sets the "status_type" field.
func (uu *UserUpdate) SetStatusType(s string) *UserUpdate {
	uu.mutation.SetStatusType(s)
	return uu
}

// SetNillableStatusType sets the "status_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatusType(s *string) *UserUpdate {
	if s != nil {
		uu.SetStatusType(*s)
	}
	return uu
}

// SetOauthType sets the "oauth_type" field.
func (uu *UserUpdate) SetOauthType(s string) *UserUpdate {
	uu.mutation.SetOauthType(s)
	return uu
}

// SetNillableOauthType sets the "oauth_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOauthType(s *string) *UserUpdate {
	if s != nil {
		uu.SetOauthType(*s)
	}
	return uu
}

// SetSub sets the "sub" field.
func (uu *UserUpdate) SetSub(s string) *UserUpdate {
	uu.mutation.SetSub(s)
	return uu
}

// SetNillableSub sets the "sub" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSub(s *string) *UserUpdate {
	if s != nil {
		uu.SetSub(*s)
	}
	return uu
}

// ClearSub clears the value of the "sub" field.
func (uu *UserUpdate) ClearSub() *UserUpdate {
	uu.mutation.ClearSub()
	return uu
}

// AddPhotoIDs adds the "photos" edge to the Photo entity by IDs.
func (uu *UserUpdate) AddPhotoIDs(ids ...int) *UserUpdate {
	uu.mutation.AddPhotoIDs(ids...)
	return uu
}

// AddPhotos adds the "photos" edges to the Photo entity.
func (uu *UserUpdate) AddPhotos(p ...*Photo) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPhotoIDs(ids...)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (uu *UserUpdate) SetOrganizationID(id int) *UserUpdate {
	uu.mutation.SetOrganizationID(id)
	return uu
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableOrganizationID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetOrganizationID(*id)
	}
	return uu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (uu *UserUpdate) SetOrganization(o *Organization) *UserUpdate {
	return uu.SetOrganizationID(o.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearPhotos clears all "photos" edges to the Photo entity.
func (uu *UserUpdate) ClearPhotos() *UserUpdate {
	uu.mutation.ClearPhotos()
	return uu
}

// RemovePhotoIDs removes the "photos" edge to Photo entities by IDs.
func (uu *UserUpdate) RemovePhotoIDs(ids ...int) *UserUpdate {
	uu.mutation.RemovePhotoIDs(ids...)
	return uu
}

// RemovePhotos removes "photos" edges to Photo entities.
func (uu *UserUpdate) RemovePhotos(p ...*Photo) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePhotoIDs(ids...)
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (uu *UserUpdate) ClearOrganization() *UserUpdate {
	uu.mutation.ClearOrganization()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Sid(); ok {
		_spec.SetField(user.FieldSid, field.TypeString, value)
	}
	if value, ok := uu.mutation.UID(); ok {
		_spec.SetField(user.FieldUID, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uu.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uu.mutation.RoleType(); ok {
		_spec.SetField(user.FieldRoleType, field.TypeString, value)
	}
	if value, ok := uu.mutation.StatusType(); ok {
		_spec.SetField(user.FieldStatusType, field.TypeString, value)
	}
	if value, ok := uu.mutation.OauthType(); ok {
		_spec.SetField(user.FieldOauthType, field.TypeString, value)
	}
	if value, ok := uu.mutation.Sub(); ok {
		_spec.SetField(user.FieldSub, field.TypeString, value)
	}
	if uu.mutation.SubCleared() {
		_spec.ClearField(user.FieldSub, field.TypeString)
	}
	if uu.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(photo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPhotosIDs(); len(nodes) > 0 && !uu.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(photo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(photo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetSid sets the "sid" field.
func (uuo *UserUpdateOne) SetSid(s string) *UserUpdateOne {
	uuo.mutation.SetSid(s)
	return uuo
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSid(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSid(*s)
	}
	return uuo
}

// SetUID sets the "uid" field.
func (uuo *UserUpdateOne) SetUID(s string) *UserUpdateOne {
	uuo.mutation.SetUID(s)
	return uuo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUID(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// ClearPassword clears the value of the "password" field.
func (uuo *UserUpdateOne) ClearPassword() *UserUpdateOne {
	uuo.mutation.ClearPassword()
	return uuo
}

// SetRoleType sets the "role_type" field.
func (uuo *UserUpdateOne) SetRoleType(s string) *UserUpdateOne {
	uuo.mutation.SetRoleType(s)
	return uuo
}

// SetNillableRoleType sets the "role_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoleType(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRoleType(*s)
	}
	return uuo
}

// SetStatusType sets the "status_type" field.
func (uuo *UserUpdateOne) SetStatusType(s string) *UserUpdateOne {
	uuo.mutation.SetStatusType(s)
	return uuo
}

// SetNillableStatusType sets the "status_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatusType(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetStatusType(*s)
	}
	return uuo
}

// SetOauthType sets the "oauth_type" field.
func (uuo *UserUpdateOne) SetOauthType(s string) *UserUpdateOne {
	uuo.mutation.SetOauthType(s)
	return uuo
}

// SetNillableOauthType sets the "oauth_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOauthType(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOauthType(*s)
	}
	return uuo
}

// SetSub sets the "sub" field.
func (uuo *UserUpdateOne) SetSub(s string) *UserUpdateOne {
	uuo.mutation.SetSub(s)
	return uuo
}

// SetNillableSub sets the "sub" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSub(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSub(*s)
	}
	return uuo
}

// ClearSub clears the value of the "sub" field.
func (uuo *UserUpdateOne) ClearSub() *UserUpdateOne {
	uuo.mutation.ClearSub()
	return uuo
}

// AddPhotoIDs adds the "photos" edge to the Photo entity by IDs.
func (uuo *UserUpdateOne) AddPhotoIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddPhotoIDs(ids...)
	return uuo
}

// AddPhotos adds the "photos" edges to the Photo entity.
func (uuo *UserUpdateOne) AddPhotos(p ...*Photo) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPhotoIDs(ids...)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (uuo *UserUpdateOne) SetOrganizationID(id int) *UserUpdateOne {
	uuo.mutation.SetOrganizationID(id)
	return uuo
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOrganizationID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetOrganizationID(*id)
	}
	return uuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (uuo *UserUpdateOne) SetOrganization(o *Organization) *UserUpdateOne {
	return uuo.SetOrganizationID(o.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearPhotos clears all "photos" edges to the Photo entity.
func (uuo *UserUpdateOne) ClearPhotos() *UserUpdateOne {
	uuo.mutation.ClearPhotos()
	return uuo
}

// RemovePhotoIDs removes the "photos" edge to Photo entities by IDs.
func (uuo *UserUpdateOne) RemovePhotoIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemovePhotoIDs(ids...)
	return uuo
}

// RemovePhotos removes "photos" edges to Photo entities.
func (uuo *UserUpdateOne) RemovePhotos(p ...*Photo) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePhotoIDs(ids...)
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (uuo *UserUpdateOne) ClearOrganization() *UserUpdateOne {
	uuo.mutation.ClearOrganization()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Sid(); ok {
		_spec.SetField(user.FieldSid, field.TypeString, value)
	}
	if value, ok := uuo.mutation.UID(); ok {
		_spec.SetField(user.FieldUID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uuo.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.RoleType(); ok {
		_spec.SetField(user.FieldRoleType, field.TypeString, value)
	}
	if value, ok := uuo.mutation.StatusType(); ok {
		_spec.SetField(user.FieldStatusType, field.TypeString, value)
	}
	if value, ok := uuo.mutation.OauthType(); ok {
		_spec.SetField(user.FieldOauthType, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Sub(); ok {
		_spec.SetField(user.FieldSub, field.TypeString, value)
	}
	if uuo.mutation.SubCleared() {
		_spec.ClearField(user.FieldSub, field.TypeString)
	}
	if uuo.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(photo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPhotosIDs(); len(nodes) > 0 && !uuo.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(photo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(photo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
