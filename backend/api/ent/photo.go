// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/photo"
	"api/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Photo is the model entity for the Photo schema.
type Photo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PhotoQuery when eager-loading is set.
	Edges        PhotoEdges `json:"edges"`
	user_photos  *int
	selectValues sql.SelectValues
}

// PhotoEdges holds the relations/edges for other nodes in the graph.
type PhotoEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PhotoEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Photo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case photo.FieldID:
			values[i] = new(sql.NullInt64)
		case photo.FieldName, photo.FieldURL:
			values[i] = new(sql.NullString)
		case photo.ForeignKeys[0]: // user_photos
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Photo fields.
func (ph *Photo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case photo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ph.ID = int(value.Int64)
		case photo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ph.Name = value.String
			}
		case photo.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				ph.URL = value.String
			}
		case photo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_photos", value)
			} else if value.Valid {
				ph.user_photos = new(int)
				*ph.user_photos = int(value.Int64)
			}
		default:
			ph.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Photo.
// This includes values selected through modifiers, order, etc.
func (ph *Photo) Value(name string) (ent.Value, error) {
	return ph.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Photo entity.
func (ph *Photo) QueryUser() *UserQuery {
	return NewPhotoClient(ph.config).QueryUser(ph)
}

// Update returns a builder for updating this Photo.
// Note that you need to call Photo.Unwrap() before calling this method if this Photo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *Photo) Update() *PhotoUpdateOne {
	return NewPhotoClient(ph.config).UpdateOne(ph)
}

// Unwrap unwraps the Photo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ph *Photo) Unwrap() *Photo {
	_tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: Photo is not a transactional entity")
	}
	ph.config.driver = _tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *Photo) String() string {
	var builder strings.Builder
	builder.WriteString("Photo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ph.ID))
	builder.WriteString("name=")
	builder.WriteString(ph.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(ph.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Photos is a parsable slice of Photo.
type Photos []*Photo
